# AoC 2022 - Day 8

```elixir
Mix.install([
  {:req, "~> 0.3.2"},
  {:req_aoc, github: "mcrumm/req_aoc", ref: "28e3813"}
])
```

## Get input

```elixir
input = ReqAOC.fetch!({2022, 08, System.fetch_env!("LB_AOC_SESSION")})
```

## Part 1

```elixir
defmodule AoC do
  def calculate(input) do
    rows = parse(input)
    # Transpose
    cols = rows |> Enum.zip() |> Enum.map(&Tuple.to_list/1)

    for {row, row_idx} <- Enum.with_index(rows) do
      for {digit, col_idx} <- Enum.with_index(row) do
        col = Enum.at(cols, col_idx)

        digits_to_left =
          if col_idx > 0 do
            Enum.slice(row, 0..(col_idx - 1))
          else
            []
          end

        digits_to_right = Enum.slice(row, (col_idx + 1)..-1)

        digits_to_top =
          if row_idx > 0 do
            Enum.slice(col, 0..(row_idx - 1))
          else
            []
          end

        digits_to_bottom = Enum.slice(col, (row_idx + 1)..-1)

        visible_from_left? = digit > Enum.max(digits_to_left, fn -> -1 end)
        visible_from_right? = digit > Enum.max(digits_to_right, fn -> -1 end)
        visible_from_top? = digit > Enum.max(digits_to_top, fn -> -1 end)
        visible_from_bottom? = digit > Enum.max(digits_to_bottom, fn -> -1 end)

        visible? =
          visible_from_left? or visible_from_right? or visible_from_top? or visible_from_bottom?

        if visible?, do: 1, else: 0
      end
      |> Enum.sum()
    end
    |> Enum.sum()
  end

  def parse(input) do
    input
    |> String.trim()
    |> String.split("\n")
    |> Enum.map(fn line ->
      line |> String.graphemes() |> Enum.map(&String.to_integer/1)
    end)
  end
end

test_input = """
30373
25512
65332
33549
35390
"""

AoC.calculate(test_input)
# AoC.calculate(input)
```

Part 2

```elixir
defmodule AoC2 do
  def calculate(input) do
    rows = parse(input)
    # Transpose
    cols = rows |> Enum.zip() |> Enum.map(&Tuple.to_list/1)

    for {row, row_idx} <- Enum.with_index(rows) do
      for {digit, col_idx} <- Enum.with_index(row) do
        col = Enum.at(cols, col_idx)

        digits_to_left =
          if col_idx > 0 do
            Enum.slice(row, 0..(col_idx - 1))
          else
            []
          end

        digits_to_right = Enum.slice(row, (col_idx + 1)..-1)

        digits_to_top =
          if row_idx > 0 do
            Enum.slice(col, 0..(row_idx - 1))
          else
            []
          end

        digits_to_bottom = Enum.slice(col, (row_idx + 1)..-1)

        left_view_distance = view_distance(digit, Enum.reverse(digits_to_left))
        right_view_distance = view_distance(digit, digits_to_right)
        top_view_distance = view_distance(digit, Enum.reverse(digits_to_top))
        bottom_view_distance = view_distance(digit, digits_to_bottom)

        left_view_distance * right_view_distance * top_view_distance * bottom_view_distance
      end
      |> Enum.max()
    end
    |> Enum.max()
  end

  def parse(input) do
    input
    |> String.trim()
    |> String.split("\n")
    |> Enum.map(fn line ->
      line |> String.graphemes() |> Enum.map(&String.to_integer/1)
    end)
  end

  def view_distance(_value, []), do: 0

  def view_distance(value, trees) do
    first_larger_tree_idx = Enum.find_index(trees, fn t -> t >= value end)

    if first_larger_tree_idx do
      first_larger_tree_idx + 1
    else
      # No larger tree from it until the edge
      length(trees)
    end
  end
end

test_input = """
30373
25512
65332
33549
35390
"""

# AoC2.calculate(test_input)
AoC2.calculate(input)
```
